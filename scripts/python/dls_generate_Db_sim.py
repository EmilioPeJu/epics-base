#!/bin/env python

import os, sys
from dlsxmlparserfunctions import *

# write edm macro substitutions files
def gen_Db_sim(table,D,filename):

	####################
	# hardcoded fields #
	####################
	template1 = 'simulationtemp.template'
	template2 = 'simulationflow.template'
	template3 = 'simulationtemp.template'
	temp_defaults = {# lookup for temp sim defaults
    'units': "C",
    'min': 0,
    'max': 100,
		'minsim': -10,
		'maxsim':	110,
		'incsim': 5
	}
	curr_defaults = {# lookup for temp sim defaults
    'units': "uA",
    'min': 0,
    'max': 100,
		'minsim': 0,
		'maxsim':	95,
		'incsim': 5,
		'initsim': 50
	}
	lo_flow_defaults = {# lookup for lo flow sim defaults
    'desc': '"low flow"',
    'znam': 'LOW_FLOW',
    'onam': 'NORMAL',
    'zsv': 'MINOR',
    'osv': 'NO_ALARM'
	}
	lolo_flow_defaults = {# lookup for lolo flow sim defaults
    'desc': '"low low flow"',
    'znam': 'LOLO_FLOW',
    'onam': 'NORMAL',
    'zsv': 'MAJOR',
    'osv': 'NO_ALARM'
	}

	##############
	# initialise #
	##############
	ioc = "BLxxI-XX-IOC-01"
	if D.ioc:
		ioc = D.ioc
	else:
		print "No IOC specified, defaulting to: "+ioc
	initsim=temp_defaults.get('min')
	outfile = D.filef(filename)
	
	print "Wrote "+filename
	outfile.write("""#{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
#######################################################
# This is an autogenerated substitution file.
# Please modify the source
#######################################################
#{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}

file %s\n{
pattern { device,desc,units,min,max,minsim,maxsim,incsim,initsim }\n""" % (template1))
	for row in table:
		if D.rowtype(row) == "normal" and not int(D.lookup(row,"NTEMP"))==0:
			out_row=D.insert_quotes(row)
			outfile.write("#%s temperature sensors\n" % D.lookup(out_row,'P'))
			i=1
			while i<=int(D.lookup(row,"NTEMP")):
				outfile.write("\t{ %s, %s, %s, %s, %s, %s, %s, %s, %s }\n" % \
											( D.lookup(out_row, 'P')+D.lookup(out_row, 'T'+str(i)), \
												D.lookup(out_row, 'DESCT'+str(i)), \
												temp_defaults.get('units'), \
												temp_defaults.get('min'), \
												temp_defaults.get('max'), \
												temp_defaults.get('minsim'), \
												temp_defaults.get('maxsim'), \
												temp_defaults.get('incsim'), \
												initsim))
				i+=1
				if initsim<temp_defaults.get('max')+7:
					initsim+=7
				else:
					initsim=temp_defaults.get('min')
	outfile.write("""}\n\nfile %s\n{
pattern { device, desc, znam, onam, zsv, osv }\n""" % template2)
	for row in table:
		if D.rowtype(row) == "normal" and not int(D.lookup(row,"NFLOW"))==0:
			out_row=D.insert_quotes(row)
			outfile.write("#%s water flow sensors\n" % D.lookup(out_row,'P'))
			i=1
			while i<=int(D.lookup(out_row,"NFLOW")):
				outfile.write("\t{ %s, %s, %s, %s, %s, %s }\n" % \
										 (D.lookup(out_row, 'W')+D.lookup(out_row,'W'+str(i))+D.lookup(out_row,'ELO'), \
											lo_flow_defaults.get('desc'), \
											lo_flow_defaults.get('znam'), \
											lo_flow_defaults.get('onam'), \
											lo_flow_defaults.get('zsv'), \
											lo_flow_defaults.get('osv')))
				outfile.write("\t{ %s, %s, %s, %s, %s, %s }\n" % \
										 (D.lookup(out_row, 'W')+D.lookup(out_row,'W'+str(i))+D.lookup(out_row,'ELOLO'), \
											lolo_flow_defaults.get('desc'), \
											lolo_flow_defaults.get('znam'), \
											lolo_flow_defaults.get('onam'), \
											lolo_flow_defaults.get('zsv'), \
											lolo_flow_defaults.get('osv')))
				i+=1
	outfile.write("""}\n\nfile %s\n{
pattern { device,desc,units,min,max,minsim,maxsim,incsim,initsim }\n""" % template3)	
	for row in table:
		if D.rowtype(row) == "normal" and not int(D.lookup(row,"NCURR"))==0:
			out_row=D.insert_quotes(row)
			outfile.write("#%s currents\n" % D.lookup(out_row,'P'))
			i=1
			if D.lookup(out_row,"CT")=="BPM":
				outfile.write("\t{ %s, %s, %s, %s, %s, %s, %s, %s, %s }\n" % \
											( D.lookup(out_row, 'P')+":POS:Y",'"BPM Y position"',"mm",-2,2,-2,2,0.1,0.4 ))
				outfile.write("\t{ %s, %s, %s, %s, %s, %s, %s, %s, %s }\n" % \
											( D.lookup(out_row, 'P')+":POS:X",'"BPM X position"',"mm",-2,2,-2,2,0.1,0.2 ))
			while i<=int(D.lookup(out_row,"NCURR")):
				outfile.write("\t{ %s, %s, %s, %s, %s, %s, %s, %s, %s }\n" % \
											( D.lookup(out_row, 'P')+D.lookup(out_row, 'C'+str(i))+D.lookup(out_row,'ECURR'), \
												D.lookup(out_row, 'DESCC'+str(i)), \
												curr_defaults.get('units'), \
												curr_defaults.get('min'), \
												curr_defaults.get('max'), \
												curr_defaults.get('minsim'), \
												curr_defaults.get('maxsim'), \
												curr_defaults.get('incsim'), \
												curr_defaults.get('initsim')))
				i+=1
	outfile.write("}\n\n")
	D.closef()
