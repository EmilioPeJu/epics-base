#!/bin/env python

import os, sys
from dlsxmlparserfunctions import *

# write edm macro substitutions files
def gen_Db_subst(table,mo_table,D,filename,SMODE=False):

	####################
	# hardcoded fields #
	####################
	template1 = 'simulationtemp.template'
	template2 = 'simulationflow.template'
	template3 = 'simulationtemp.template'

	##############
	# initialise #
	##############
	ioc = "BLxxI-XX-IOC-01"
	if D.ioc:
		ioc = D.ioc
	else:
		print "No IOC specified, defaulting to: "+ioc
	smode = ""
	outfile = D.filef(filename)
	devices = {}
	
	# parse mo_table to build real_dict
	if SMODE:
		for row in mo_table:
			if D.rowtype(row)=="normal":
				devices[D.lookup(row,"NAME")]=D.lookup(row,"SMODE").upper()
			
	template=""
	expect_pattern = 0
	last_name = "init"
	print "Wrote "+filename
	outfile.write("""#{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
#######################################################
# This is an autogenerated substitution file.
# Please modify the source
#######################################################
#{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{""")
	for row in table:
		rowtype = D.rowtype(row)
		if SMODE and rowtype == "SMODE:SIM":
			smode = "SIM"
		elif SMODE and rowtype == "SMODE:REAL":
			smode = "REAL"
		elif rowtype =="name":
			expect_pattern = 0
			outfile.write("""{\npattern { %s }\n""" % (D.strlist(D.name_row[3:])))
		elif rowtype == 'file':
			if len(row)<2:
				D.errorprint("Template filename missing in sheet %s" % filename)
			outfile.write("""}\n\nfile %s\n""" % row[1])
			expect_pattern = 1
		elif rowtype == "normal":
			if SMODE and not row[0]=="":
				last_name = D.lookup(row,"NAME")
			if SMODE and not devices.has_key(last_name):
				D.errorprint("Key error in %s: expecting <shortname>, got %s"%(filename,last_name))
			if SMODE and smode and not devices[last_name][:len(smode)]==smode:
				continue
			if expect_pattern:
				outfile.write("""{\npattern { %s }\n""" % (D.strlist(D.name_row[3:])))
				expect_pattern = 0
			row_out = []
			i = 3
			while i < len(D.name_row):
				if D.name_row[i][:1]=="#":
					if not row[i]=="":
						outfile.write("""%s %s\n""" % (D.name_row[i],row[i]))	
				else:
					row_out.append(D.lookup(row,D.name_row[i],emptyval='""'))
				i+=1
			outfile.write("""{ %s }\n""" % D.strlist(D.insert_quotes(row_out)))	
	outfile.write("}\n\n")
	D.closef()
