#!/bin/env python

import os, sys
from dlsxmlparserfunctions import *

# write edm macro substitutions files
def gen_Db_subst(table,mo_table,D,filename):

	####################
	# hardcoded fields #
	####################

	##############
	# initialise #
	##############
	flag=False
	for row in table:
		if D.rowtype(row)=="normal":
			flag=True
		
	if flag:
		outfile = D.filef(filename)
		template=""
		expect_pattern = 0
		last_name = "init"
	
		print "Wrote "+filename
		outfile.write("""#{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
#######################################################
# This is an autogenerated substitution file.
# Please modify the source
#######################################################
#{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{""")
		for row in table:
			rowtype = D.rowtype(row)
			if rowtype =="name":
				expect_pattern = 0
				outfile.write("""{\npattern { %s }\n""" % (D.strlist(D.name_row[3:])))
			elif rowtype == 'file':
				if len(row)<2:
					D.errorprint("Template filename missing in sheet %s" % filename)
				outfile.write("""}\n\nfile %s\n""" % row[1])
				expect_pattern = 1
			elif rowtype == "normal":
				if not row[0]=="":
					last_name = D.lookup(row,"NAME")
				if expect_pattern:
					outfile.write("""{\npattern { %s }\n""" % (D.strlist(D.name_row[3:])))
					expect_pattern = 0
				row_out = []
				i = 3
				while i < len(D.name_row):
					if D.name_row[i][:1]=="#":
						if not row[i]=="":
							outfile.write("""%s %s\n""" % (D.name_row[i],row[i]))	
					else:
						row_out.append(D.lookup(row,D.name_row[i],emptyval='""'))
					i+=1
				outfile.write("""{ %s }\n""" % D.strlist(D.insert_quotes(row_out)))	
		outfile.write("}\n\n")
		D.closef()
