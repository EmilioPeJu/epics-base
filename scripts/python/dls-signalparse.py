#!/usr/bin/env python

"""
dls-signalparse.py
Author: Peter Denison

This script extracts signal data from
XML spreadsheets and places them into "db" files.
"""

import sys, re, time
from dlsxmlexcelparser import *
from optparse import OptionParser

motor_defaults = {
    'DESC': ('', 4),
    'OUT': ('', 7),
    'DTYP': ("PMAC", 6),
    'VELO': (3000, 13),
    'VBAS': (0, 12),
    'ACCL': (1, 16),
    'MRES': (0.00004, 9),
    'PREC': (3, 23),
    'EGU': ("mm", 24),
    'DHLM': (50 ,22),
    'DLLM': (-50, 19),
    'INIT': ('""', 25),
}

temp_defaults = {
    'EGUL': (0, 5),
    'EGUF': (100, 6),
    'EGU': ("C", 13),
}

bi_defaults = {
    'DESC': ('', 4),
    'ZNAM': ('OFF', 5),
    'ONAM': ('ON', 6),
    'ZSV': ('MINOR', 7),
    'OSV': ('NO_ALARM', 8),
    'COSV': ('NO_ALARM', 9),
}

signal_re = re.compile('^#C(\d+)\s*S(\d+)')
filter_re = None
exclude_re = None
input_file = None

def lookup(list, key, dict = motor_defaults):
    params = dict.get(key)
    if params:
        defval, index = params
        if index >= len(list) or list[index] == '':
            return defval
        else:
            return list[index]
    else:
        return ''
            
def header():
    now = time.strftime('%a %d %b %Y %T %Z')
    source = input_file
    print """# This file was auto-generated on %(now)s from source:
# %(source)s
#
# *** Do NOT edit this file! Edit the source instead ***
#""" % locals()


def motorHandler(table, template):
    card = 0
    signal = 0
    header()
    print """file %s
{
pattern { P, M, DESC, DTYP, DIR, VELO, VBAS, ACCL, BDST, BVEL, BACC, C, S, MRES, PREC, EGU, DHLM, DLLM, INIT }""" % template
    for row in table:
        if len(row) >= 4 and \
               row[2] and \
               row[2] != 'Device name' and \
               (not filter_re or filter_re.search(row[2]+row[3])) and \
               (not exclude_re or not exclude_re.search(row[2]+row[3])):
            out = lookup(row, 'OUT')
            if out:
                c, s = signal_re.match(out).groups()
            else:
                c = card
                s = signal
                signal += 1
                if signal > 31:
                    signal = 0
                    card += 1
            print "\t{ %s, %s, \"%s\", %s, 0, %s, %s, %s, %s, %s, %s, %d, %d, %s, %s, %s, %s, %s, %s}" % \
                  ( row[2], row[3], \
                    lookup(row, 'DESC'), \
                    lookup(row, 'DTYP'), \
                    lookup(row, 'VELO'), \
                    lookup(row, 'VBAS'), \
                    lookup(row, 'ACCL'), \
                    0, 0, 0, \
                    c, s, \
                    lookup(row, 'MRES'), \
                    lookup(row, 'PREC'), \
                    lookup(row, 'EGU'), \
                    lookup(row, 'DHLM'), \
                    lookup(row, 'DLLM'), \
                    lookup(row, 'INIT') )
    print "}"

def aiHandler(table, template):
    incsim = 0.2
    header()
    print """file %s
{
pattern { device, max, min, units, maxsim, minsim, incsim, initsim}""" % template
    for row in table:
        if len(row) >= 4 and \
               row[2] and \
               row[2] != 'Device name' and \
               (not filter_re or filter_re.search(row[2]+row[3])) and \
               (not exclude_re or not exclude_re.search(row[2]+row[3])):
            incsim += 0.05
            if incsim > 1.0:
                incsim = 0.2
            print "\t{ %s%s, %s, %s, %s, %s, %s, %s, %s }" % \
                  ( row[2], row[3], \
                    lookup(row, 'EGUF', temp_defaults), \
                    lookup(row, 'EGUL', temp_defaults), \
                    lookup(row, 'EGU', temp_defaults), \
                    70, 20, incsim, 25)
    print "}"

def biHandler(table, template):
    header()
    print """file %s
{
pattern { device, desc, zsv, osv, znam, onam}""" % template
    for row in table:
        if len(row) >= 4 and \
               row[2] and \
               row[2] != 'Device name' and \
               (not filter_re or filter_re.search(row[2]+row[3])) and \
               (not exclude_re or not exclude_re.search(row[2]+row[3])):
            print "\t{ %s%s, \"%s\", %s, %s, %s, %s }" % \
                  ( row[2], row[3], \
                    lookup(row, 'DESC', bi_defaults), \
                    lookup(row, 'ZSV', bi_defaults), \
                    lookup(row, 'OSV', bi_defaults), \
                    lookup(row, 'ZNAM', bi_defaults), \
                    lookup(row, 'ONAM', bi_defaults) )
    print "}"


Handlers = {
    'MotorRecord': (motorHandler, 'motor', 'basic_motor.template'),
    'AnalogueInput' : (aiHandler, 'temp', 'simulationtemp.template'),
    'BinaryInput' : (biHandler, 'binary', 'simulationflow.template')
}

def main():
    parser = OptionParser("usage: %prog [options] input-file")
    parser.add_option("-s", "--sheet", dest="sheet",
                      help="The name of the worksheet to parse")
    parser.add_option("-t", "--template", dest="template",
                      help="Template filename to use in substitution")
    parser.add_option("-f", "--file", dest="filename", metavar="FILE",
                      help="The basename of the substitutions file")
    parser.add_option("-l", "--filter", dest="filter", metavar="REGEXP",
                      help="Filter record names through REGEXP")
    parser.add_option("-e", "--exclude", dest="exclude", metavar="REGEXP",
                      help="Exclude record names that match REGEXP")

    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.error("incorrect number of arguments")

    global input_file
    input_file = args[0]

    global filter_re, exclude_re
    if options.filter:
        filter_re = re.compile(options.filter)
    if options.exclude:
        exclude_re = re.compile(options.exclude)

    # Parse the spreadsheet input
    data = ExcelHandler()
    parse(args[0], data)

    for name,table in data.tables:
        handler = Handlers.get(name)
        if handler and options.sheet and options.sheet == name:
            function, filePrefix, template = handler
            # Override the default name, if filename was supplied
            if options.filename:
                filePrefix = options.filename
            if options.template:
                template = options.template
            sys.stdout = file(filePrefix+'.substitutions', 'w')
            function(table, template)
            sys.stdout.close()
            sys.stdout = sys.__stdout__


if __name__ == "__main__":
    main()
